package com.db.helper;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

import com.MetaHRMSystemException;
import com.model.Vehicle;


public class EmployeeDBHelper {
	
	private static String INSERT_EMPLOYEE_QUERY = "insert into EMPLOYEE (FIRST_NAME, LAST_NAME, EMAIL_ID, SALARY, CREATED_BY, CREATED_TIME) VALUES (?, ?, ?, ?, ?, ?)";
	
	private static String SELECT_FOR_EMAIL_ID_QUERY = "select id from EMPLOYEE where EMAIL_ID=?";
	
	protected void create(Connection connection, Vehicle vehicle) throws MetaHRMSystemException {
		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = connection.prepareStatement(INSERT_EMPLOYEE_QUERY);
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.setString(1, vehicle.getMakeYear());
			preparedStatement.setString(2, vehicle.getModel());
			preparedStatement.setInt(3, vehicle.getEngineInCC());
			preparedStatement.setInt(4, vehicle.getFuelCapacity());
			preparedStatement.setDouble(5, vehicle.getMilage());
			preparedStatement.setDouble(6, vehicle.getPrice());
			preparedStatement.setDouble(7, vehicle.getRoadTax());
			preparedStatement.setString(8, vehicle.getCreatedBy());
			preparedStatement.setDate(9,  new Date(vehicle.getCreatedTime().getTime()));
			preparedStatement.execute();
		} catch (SQLException e) {
			throw new MetaHRMSystemException("Could not create Employee, [" + e.getMessage() + "]");
		} finally {
			if(preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					System.out.println("Could not close prepared statement, [" + e.getMessage() + "]");
				}
			}
		}
	}
	
	
	protected int getEmployeeIdByEmail(Connection connection, String emailId) throws MetaHRMSystemException {
		int id = -1;
		if(connection != null) {
			PreparedStatement preparedStatement = null;
			ResultSet resultSet = null;
			try {
				preparedStatement = connection.prepareStatement(SELECT_FOR_EMAIL_ID_QUERY);
				preparedStatement.setString(1, emailId);
				resultSet = preparedStatement.executeQuery();
				while(resultSet.next()) {
					id = resultSet.getInt(1);
				}
			} catch(SQLException e) {
				throw new MetaHRMSystemException("Could not find Employee by email id, [" + e.getMessage() + "]");
			}
		}
		return id;
	}
	

}
